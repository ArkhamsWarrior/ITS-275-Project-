package DreidelManX;

import java.util.Random;
//import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;

public class MainGame {
	
	/*
	 * Player rolls
	 * 
	 * if gelt <0 =, eliminate
	 * 
	 * check pot
	 * 
	 * within check pot method, there is another method for when the pot hits 1 or 0 gelt, which causes every player
	 * to ante up and checks every player's gelt after ante up
	 */
	
	static Random rng = new Random();
	static Pot pot;
	static int numRemainingPlayers;
	
	public static void main(String[] Args) throws IOException{
		
		FileWriter write = new FileWriter("uno.txt", true);
		
		PrintWriter testPrint = new PrintWriter(write);
		testPrint.println("Player 1 wins");
		testPrint.close();
		
		///SETTING UP
		int numPlayers = 4;
		int startGelt = 10;
		numRemainingPlayers = numPlayers; //System.out.print(numRemainingPlayers);
		pot = new Pot(); //System.out.println(pot.gelt);
		
		Player[] players = new Player[numPlayers];
		
		for (int i = 0; i < players.length; i++) {
			players[i] = new Player(startGelt);
			players[i].name = "Player " + (i + 1); //System.out.println(players[i].name);
		}
		
		anteUp(players);
		
		//ROLLING
		
		
		
		/* Step 1: Every player antes Up
		 * 
		 * Step 2: Player 1 rolls
		 * 
		 * Step 3: Pot and Player 1 adjust values
		 * 
		 * Step 4: Check if Player 1 is eliminated
		 * 
		 * Step 5: Check if Pot is empty
		 * 
		 * Step 6: If pot is empty, Ante Up
		 * 
		 * Step 7: After Ante Up, check who is still in
		 */
		
		
	}
	
	public static void test() {
		System.out.println(numRemainingPlayers);
		numRemainingPlayers--;
		System.out.println(numRemainingPlayers);
	}
	
	public static void gameRound(Player[] players) {
	
		for (int i = 0; i < players.length; i++) {
			
			
			
			
		}
		
		//Check at end how many players are active at the end of any action which
		//might reduce coins- this includes in anteUp
		//Thus, in the event of a tie, the later player wins because their coins go in afterwards
		
	}
	
	public static void spinPlayer(Player p) {
		
		int roll = rng.nextInt(4) + 1;
		
		switch (roll) {
			case 1:
				p.gelt--; pot.gelt++; //Shin, shin, put one in!
			case 2:
				p.gelt += Math.floorDiv(pot.gelt, 2); //Hey, get half the gelt in the pot (rounded down)
				pot.gelt -= Math.floorDiv(pot.gelt, 2);
			case 3:
				p.gelt += pot.gelt; //Gimel, get ALL the gelt in the pot
				pot.gelt = 0;
			case 4: //Nun, nothing happens
				}
		
	}
	
	public static void anteUp(Player[] players) { //For each player, check if active. If active, drop a coin.
		//Update active status of each player
		for (int i = 0; i < players.length; i++)
		{
			if (players[i].active)
			{
				players[i].gelt--;
				pot.gelt++; //System.out.println(pot.gelt);
			}
			
			players[i].update();
			
		}
		
	}
	
	public static void checkEndGame(Player[] players) {
		
		if (numRemainingPlayers == 1) {
			endGame(players);
		}
		
	}
	
	public static void endGame(Player[] players) {
		
		for (int i=0; i < players.length; i++)
	    {
	        if (players[i].active)
	        {
	        	//Find the one active player and print a message saying they won, terminate loop
	        	//How to terminate loop? Give "active" property to GeltHolder and use active property of pot?
	        }
	    }
		
	}
	
}
